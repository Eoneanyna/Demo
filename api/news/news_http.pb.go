// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.26.1
// source: api/news/news.proto

package news

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNewsServiceCreateNews = "/demo.NewsService/CreateNews"
const OperationNewsServiceGetNewsById = "/demo.NewsService/GetNewsById"

type NewsServiceHTTPServer interface {
	// CreateNews 根据ID获取新闻详情
	CreateNews(context.Context, *CreateNewsRequest) (*CreateNewsResponse, error)
	// GetNewsById 根据ID获取新闻详情
	GetNewsById(context.Context, *GetNewsByIdRequest) (*GetNewsByIdResponse, error)
}

func RegisterNewsServiceHTTPServer(s *http.Server, srv NewsServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/news/{id}", _NewsService_GetNewsById0_HTTP_Handler(srv))
	r.POST("/news", _NewsService_CreateNews0_HTTP_Handler(srv))
}

func _NewsService_GetNewsById0_HTTP_Handler(srv NewsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNewsByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNewsServiceGetNewsById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNewsById(ctx, req.(*GetNewsByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNewsByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _NewsService_CreateNews0_HTTP_Handler(srv NewsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNewsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNewsServiceCreateNews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNews(ctx, req.(*CreateNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNewsResponse)
		return ctx.Result(200, reply)
	}
}

type NewsServiceHTTPClient interface {
	CreateNews(ctx context.Context, req *CreateNewsRequest, opts ...http.CallOption) (rsp *CreateNewsResponse, err error)
	GetNewsById(ctx context.Context, req *GetNewsByIdRequest, opts ...http.CallOption) (rsp *GetNewsByIdResponse, err error)
}

type NewsServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewNewsServiceHTTPClient(client *http.Client) NewsServiceHTTPClient {
	return &NewsServiceHTTPClientImpl{client}
}

func (c *NewsServiceHTTPClientImpl) CreateNews(ctx context.Context, in *CreateNewsRequest, opts ...http.CallOption) (*CreateNewsResponse, error) {
	var out CreateNewsResponse
	pattern := "/news"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNewsServiceCreateNews))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NewsServiceHTTPClientImpl) GetNewsById(ctx context.Context, in *GetNewsByIdRequest, opts ...http.CallOption) (*GetNewsByIdResponse, error) {
	var out GetNewsByIdResponse
	pattern := "/news/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNewsServiceGetNewsById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
